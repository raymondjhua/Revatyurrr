DROP TABLE EMPLOYEE;
DROP TABLE DEPARTMENT;

CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    EMP_FIRSTNAME VARCHAR2(100), 
    EMP_LASTNAME VARCHAR2(100),
    DEPARTMENT_ID INTEGER,
    SALARY NUMBER,
    EMP_EMAIL VARCHAR2(100)
);
/
CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID INTEGER PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(100)
);
/

CREATE SEQUENCE E_INC
START WITH 1
INCREMENT BY 1;
/
CREATE SEQUENCE D_INC
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER E_TRIG
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
   SELECT E_INC.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER D_TRIG
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
   SELECT D_INC.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM DUAL;
END;
/

ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_EMPLOYEE_DEPARTMENT
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID);
/

INSERT ALL
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Ally', 'Allison', 1, 50000, 'A.Allison@gmail.com')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Benny', 'Benson', 1, 50000, 'B.Benson@gmail.com')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Connie', 'Codor', 2, 60000, 'C.Codor@gmail.com')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Danny', 'Daniels', 2, 60000, 'D.Daniels@gmail.com')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Eric', 'Ericson', 3, 70000, 'E.Ericson@gmail.com')
INTO EMPLOYEE(EMP_FIRSTNAME, EMP_LASTNAME, DEPARTMENT_ID, SALARY, EMP_EMAIL)
VALUES ('Fredward', 'Frederick', 3, 70000, 'F.Frederick@gmail.com')
SELECT * FROM DUAL;

INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Taffy');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Chocolate');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Licorice');

/*
Create a stored procedure SP_GIVE_RAISE which takes in a 
DEPARTMENT_ID and increases each employee's salary within the 
department by 10%, and returns the new average salary for the 
department, as well as a boolean value indicating whether the 
ID entered corresponds to a valid department.
*/
CREATE OR REPLACE PROCEDURE SP_GIVE_RAISE (D_ID_IN IN INTEGER)
AS
AVERAGE NUMBER;
VALID BOOLEAN;
TEMP NUMBER;
BEGIN 
    VALID := FALSE;
    SELECT MAX(SALARY) INTO TEMP FROM EMPLOYEE WHERE DEPARTMENT_ID = D_ID_IN;
    IF (TEMP IS NOT NULL) THEN 
    VALID := TRUE;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('DEPARTMENT_ID '||D_ID_IN||' is '||BOOLEAN_TO_CHAR(VALID));    
    IF VALID = FALSE THEN
    RETURN;
    END IF;
    
    UPDATE EMPLOYEE SET SALARY = SALARY * 1.1 WHERE DEPARTMENT_ID = D_ID_IN;
    SELECT AVG(SALARY) INTO AVERAGE FROM EMPLOYEE WHERE DEPARTMENT_ID = D_ID_IN;
    DBMS_OUTPUT.PUT_LINE('The new average salary for the department is '||AVERAGE);
    COMMIT;
END;

EXECUTE SP_GIVE_RAISE(4);

CREATE OR REPLACE FUNCTION BOOLEAN_TO_CHAR(FLAG IN BOOLEAN)
RETURN VARCHAR2 IS
BEGIN
  RETURN
   CASE FLAG
     WHEN TRUE THEN 'FOUND'
     WHEN FALSE THEN 'NOT FOUND'
     ELSE 'NULL'
   END;
END;